package com.rdsr.gameoflife.cell;

import java.util.ArrayList;
import java.util.List;

/**
 * Simple immutable class representing a cell in a 2D World
 */
public class TwoDPosition implements Position {

  final int i, j;

  public TwoDPosition(final int i, final int j) {
    this.i = i;
    this.j = j;
  }
  
  @Override
  public List<Position> listAllNeighorPositions() {
    /**
     * At max there can be only 8 neighbor positions
     */
    final List<Position> positions = new ArrayList<Position>();

    positions.add(new TwoDPosition(i - 1, j - 1));
    positions.add(new TwoDPosition(i - 1, j));
    positions.add(new TwoDPosition(i - 1, j + 1));

    positions.add(new TwoDPosition(i, j - 1));
    positions.add(new TwoDPosition(i, j + 1));

    positions.add(new TwoDPosition(i + 1, j - 1));
    positions.add(new TwoDPosition(i + 1, j));
    positions.add(new TwoDPosition(i + 1, j + 1));

    return positions;
  }

  @Override
  public int compareTo(final Position o) {
    if (o instanceof TwoDPosition) {
      TwoDPosition other = (TwoDPosition) o;
      return i - other.i == 0 ? j - other.j : i - other.i;
    } else
      throw new IllegalStateException(o + " not an instance of " + TwoDPosition.class);
  }

  /**
   * auto generated by eclipse
   */
  @Override
  public int hashCode() {
    final int prime = 31;

    int result = 1;
    result = prime * result + i;
    result = prime * result + j;

    return result;
  }
 
  /**
   * auto generated by eclipse
   */
  @Override
  public boolean equals(final Object obj) {
    if (this == obj)
      return true;

    if (obj == null)
      return false;

    if (getClass() != obj.getClass())
      return false;

    final TwoDPosition other = (TwoDPosition) obj;
    if (i != other.i)
      return false;

    if (j != other.j)
      return false;

    return true;
  }

  @Override
  public String toString() {
    return i + "," + j;
  }
}
