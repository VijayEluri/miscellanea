package com.rdsr.gameoflife.transition;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.rdsr.gameoflife.cell.Cell;
import com.rdsr.gameoflife.cell.Cell.State;
import com.rdsr.gameoflife.cell.Position;
import com.rdsr.gameoflife.world.TwoDWorld;

/**
 * {@link TwoDTransitionRule} provides transitions to be used with a {@link TwoDWorld}
 */
public enum TwoDTransitionRule implements TransitionRule {
  /**
   * enum to provide singeton property.
   */
  INSTANCE;

  /**
   * contains all possible transitions allowed.
   */
  private final Map<TransitionCritera, Cell> rules = new HashMap<TransitionCritera, Cell>();

  private TwoDTransitionRule() {
    /**
     * only contains entries in which cell state changes
     * e.g a living cell with 2 or 3 live neighbors is not added
     * in rules map since, the cell's state won't change.
     */
    rules.put(new TransitionCritera(0, State.LIVING), Cell.DEAD);
    rules.put(new TransitionCritera(1, State.LIVING), Cell.DEAD);
    rules.put(new TransitionCritera(3, State.DEAD), Cell.LIVING);
    rules.put(new TransitionCritera(4, State.LIVING), Cell.DEAD);
    rules.put(new TransitionCritera(5, State.LIVING), Cell.DEAD);
    rules.put(new TransitionCritera(6, State.LIVING), Cell.DEAD);
    rules.put(new TransitionCritera(7, State.LIVING), Cell.DEAD);
    rules.put(new TransitionCritera(8, State.LIVING), Cell.DEAD);
  }

  public Cell update(Cell cell, Position position, List<Cell> neighbors) {
    final int livingNeighbors = countLiving(neighbors);
    final TransitionCritera key = new TransitionCritera(livingNeighbors, cell.getState());
    if (rules.containsKey(key))
      return rules.get(key);
    return cell; // no change of state required;
  }

  private int countLiving(List<Cell> neighbors) {
    int count = 0;
    for (final Cell neighbor : neighbors)
      if (neighbor.getState() == State.LIVING)
        count += 1;
    return count;
  }

  private static final class TransitionCritera {
    private final int livingCells;
    private final Cell.State state;

    public TransitionCritera(int _livingCells, State _state) {
      livingCells = _livingCells;
      state = _state;
    }

    /**
     * auto generated by eclipse
     */
    @Override
    public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result + livingCells;
      result = prime * result + ((state == null) ? 0 : state.hashCode());
      return result;
    }

    /**
     * auto generated by eclipse
     */
    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final TransitionCritera other = (TransitionCritera) obj;
      if (livingCells != other.livingCells)
        return false;
      if (state != other.state)
        return false;
      return true;
    }
  }
}